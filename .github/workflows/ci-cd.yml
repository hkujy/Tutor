name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tutoring_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tutoring_test" >> .env.test
        echo "NEXTAUTH_SECRET=test-secret-32-characters-long-minimum" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "SENDGRID_API_KEY=test-sendgrid-key" >> .env.test
        echo "FROM_EMAIL=test@example.com" >> .env.test

    - name: Run database migrations
      run: |
        npx prisma migrate deploy
        npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tutoring_test

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check
      continue-on-error: true

    - name: Run unit tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tutoring_test
        NEXTAUTH_SECRET: test-secret-32-characters-long-minimum
        REDIS_URL: redis://localhost:6379
        SENDGRID_API_KEY: test-sendgrid-key
        FROM_EMAIL: test@example.com

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tutoring_test
        NEXTAUTH_SECRET: test-secret-32-characters-long-minimum
        REDIS_URL: redis://localhost:6379
        SENDGRID_API_KEY: test-sendgrid-key
        FROM_EMAIL: test@example.com

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results/
          playwright-report/
        retention-days: 7

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
        retention-days: 1

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for vulnerabilities
      run: npx audit-ci --moderate

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.tutoringcalendar.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here
        # Example: using Docker, Vercel, or other platforms
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add basic health checks here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: production
      url: https://tutoringcalendar.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment script here
        
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add comprehensive health checks here

    - name: Notify team
      if: always()
      run: |
        echo "Notifying team of deployment status..."
        # Add notification logic (Slack, email, etc.)